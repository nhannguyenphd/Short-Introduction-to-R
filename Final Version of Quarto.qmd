---
title: Sample of Quarto Use
author: Nhan Nguyen
date: last-modified
format:
  html:
    toc: true
    toc-title: "Table of contents"
    toc-expand: 8
    toc-depth: 6
    toc-location: left
    number-sections: true
    number-depth: 8
    page-layout: full
    embed-resources: true
    anchor-sections: true
    smooth-scroll: true
engine: knitr
knitr:
  opts_chunk:
    R.options:
      width: 120
editor_options: 
  chunk_output_type: console
---

# WEEK 2

## Installing Packages

```{r}
#install.packages("ggplot2")
library(ggplot2)
library(tidyverse)
```

```{r}
names <- read_csv("baby_names_state.csv")
names(names)
nrow(names)
ncol(names)
head(names)
tail(names)
summary(names)
```

## Using R Directly via the Console

```{r}
#To begin with, we can use the console as a calculator.
2+3
```

## Using Text Editors

```{r}
#RStudio has a built-in text editor to store and execute code.
2+3 
3*3
exp(2)
#We can also define objects, for example a is assigned (<-) the value 5 while we define b to be ln(10)
a <- 5
b <-  log(10)
```

## Data Structures in R

```{r}
# Vector: A sequence of elements of the same type
x <- c(1, 2, 3); # class(x); is.vector(x)
print(x)

# Matrix: 2D array with same data type;
# This is a 2 × 3 matrix, i.e. 2 rows and 3 columns
a <- matrix(1:6, nrow=2, ncol=3)
a
# This is a 3 × 2 matrix, i.e. 3 rows and 2 columns
b <- matrix(c(1,0,4,2,-1, 1), nrow = 3)
b
# This is a 3 × 2 matrix, i.e. 2 rows and 3 columns
c <- matrix(c(1,-1,2,1,1,0), ncol = 3)
c

# Data Frame: Table with columns of different types
df <- data.frame(ID = 1:3, States = c("California", "Texas", "WA D.C"))
df

# List: Collection of elements of different types
lis <-list(a = 1, b = "hello")
lis

### Note: The values in the body of a matrix must all be of the same type (numbers, etc.,), but the values in the body of a dataframe can vary by column: numbers, text (e.g. the names of factor levels for categorical variables, like male or female in a variable called gender), calendar dates (e.g. 23/5/04), or logical variables (TRUE or FALSE). 

```

## Basic R Commands

```{r}
# Assignment: 
x <- 10
x 

# Math operations: 
y <- x + 5
y

# Basic Functions: 
a <- c(10, 20, 13, 4, 5, 8, 10, 11)
sum(a)
mean(a)
sd(a)

# Linear Regression: 
model <- lm(y ~ x)
model

# Printing Output: 
print(x)
```

------------------------------------------------------------------------

## Common Operators

```{r}
# "> >= < <= == !=" Relational: greater than, greater than or equals, less than, less than or equals, equals, not equals

6 > 5
6 <= 5
6 != 5

# "! & |" logical : not, and, or

x <- c(TRUE, FALSE, TRUE)
y <- c(FALSE, FALSE, TRUE)

# NOT: # Inverts each value in x → FALSE, TRUE, FALSE
!x  # Returns FALSE, TRUE, FALSE

# AND: TRUE only when both x and y are TRUE → FALSE, FALSE, TRUE
x & y  # Returns FALSE, FALSE, TRUE

# OR: TRUE when either x or y is TRUE → TRUE, FALSE, TRUE
x | y  # Returns TRUE, FALSE, TRUE

# "<-" :assignment for giving a value to a variable
x <- c(1, 2, 3)
x

# "$":  select elements from a complex data object
head(names$year, 10)
```

## Two-Dimensional Plots

```{r}

install.packages("scales")
library(scales)

#Standard Normal distribution function

curve (dnorm (x, mean = 0, sd = 1), -5, 5, col = hue_pal()(2)[1],
xlab = "x", ylab = "Density of standard normal")

#Standard Normal distribution function, with section shaded

curve (dnorm (x, mean = 0, sd = 1), -5, 5, col = hue_pal()(2)[1],
xlab = "x", ylab = "Density of standard normal")
w <- seq (-2, -1, 0.01)
polygon (c (-2, w, -1), c (0, dnorm (w), 0), col = hue_pal()(2)[2])

```

## ggplot2

```{r}
## Air Quality

#| label: fig-airquality
#| fig-cap: "Temperature and ozone level."
#| warning: false
#| message: false

library(ggplot2)

# Remove rows with missing Ozone values
data_clean <- na.omit(airquality[, c("Temp", "Ozone")])

ggplot(data_clean, aes(x = Temp, y = Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess") +
  labs(x = "Temperature (F)", y = "Ozone (ppb)")
```

## Mapping

```{r}
# Install packages if needed
#install.packages("ggtext")
#install.packages("showtext")
#install.packages("rnaturalearthhires", repos = "https://ropensci.r-universe.dev")

# Load libraries
library(ggplot2)
library(ggimage)
library(sf)
library(rnaturalearth)
library(rnaturalearthhires)  # for US states
library(showtext)
library(ggtext)

# Add Google font Garamond
font_add_google(name = "Merriweather", family = "Garamond")
showtext_auto()

# World map
world <- ne_countries(scale = "medium", returnclass = "sf")
highlighted <- c("Vietnam", "Taiwan", "United States of America")
world$highlight <- ifelse(world$name %in% highlighted, "Yes", "No")

# Get US states and extract Texas
us_states <- ne_states(country = "United States of America", returnclass = "sf")
texas <- us_states[us_states$name == "Texas", ]

# Journey points and labels
journey_points <- data.frame(
  country = c("Vietnam", "Taiwan", "USA"),
  lon = c(108.2772, 121.5654, -98.5795),
  lat = c(14.0583, 25.0330, 39.8283),
  image = c(
    "https://flagcdn.com/w80/vn.png",
    "https://flagcdn.com/w80/tw.png",
    "https://flagcdn.com/w80/us.png"
  ),
  label = c(
    "**VIETNAM** <br>Bachelor & Master in Psychology",
    "**TAIWAN** <br>PhD in Psychology",
    "**USA** <br>MA & PhD in Sociology"
  )
)

# Adjust label positions (Vietnam below, others above)
labels_df <- data.frame(
  lon = journey_points$lon,
  lat = journey_points$lat + c(-12, 12, 12),
  label = journey_points$label
)

# Plot
ggplot(data = world) +
  geom_sf(aes(fill = highlight), color = "white") +
  geom_sf(data = texas, fill = "red", color = "white") +  # Texas highlighted
  scale_fill_manual(values = c("Yes" = "orange", "No" = "lightgray")) +
  geom_image(data = journey_points, aes(x = lon, y = lat, image = image), size = 0.06) +
  geom_richtext(data = labels_df, aes(x = lon, y = lat, label = label),
                family = "Garamond", size = 4.5, fill = NA, label.color = NA,
                lineheight = 1.1) +
  geom_path(data = journey_points, aes(x = lon, y = lat, group = 1),
            arrow = arrow(type = "closed", length = unit(0.05, "inches")),
            linetype = "dashed", color = "blue", linewidth = 0.8) +
  labs(title = "Educational Journey: Vietnam → Taiwan → USA") +
  theme_minimal(base_family = "Garamond") +
  theme(
    legend.position = "none",
    plot.title = element_text(family = "Garamond", size = 16),
    text = element_text(family = "Garamond")
  )

```
